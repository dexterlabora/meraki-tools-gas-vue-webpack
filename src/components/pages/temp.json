[
  [
    {
      "group": "MXVPNFirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationVpnFirewallRules(organizationId, callback)"
        }
      },
      "params": ["organizationId", "callback"]
    },
    {
      "group": "MXVPNFirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateOrganizationVpnFirewallRules(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "VLANsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkVlansEnabledState(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "VLANsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkVlan(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "VLANsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkVlan(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "VLANsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkVlansEnabledState(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "VLANsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkVlans(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "VLANsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkVlans(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "VLANsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkVlan(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "StaticRoutesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkStaticRoutes(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "StaticRoutesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkStaticRoutes(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "StaticRoutesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkStaticRoute(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "StaticRoutesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkStaticRoute(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "StaticRoutesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkStaticRoute(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkFailedConnections(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDevicesLatencyStats(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDeviceLatencyStats(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientsLatencyStats(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientLatencyStats(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDeviceConnectionStats(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientsConnectionStats(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientConnectionStats(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkLatencyStats(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkConnectionStats(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "WirelessHealthController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDevicesConnectionStats(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "AdminsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateOrganizationAdmin(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "AdminsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationAdmins(organizationId, callback)"
        }
      },
      "params": ["organizationId", "callback"]
    },
    {
      "group": "AdminsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createOrganizationAdmins(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "AdminsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteOrganizationAdmin(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "AlertSettingsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkAlertSettings(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "AlertSettingsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkAlertSettings(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmDesktopLogs(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmDeviceCommandLogs(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmConnectivity(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmDevicesMove(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmProfiles(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmCellularUsageHistory(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmPerformanceHistory(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmDeviceFields(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmDevicesLock(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmDeviceWipe(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmDevicesCheckin(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmSecurityCenters(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmRestrictions(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmCerts(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmDevicesTags(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmUserSoftwares(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmSoftwares(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmNetworkAdapters(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmWlanLists(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmDevices(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmUsers(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmUserDeviceProfiles(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmDeviceProfiles(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmAppPolaris(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmAppPolari(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkSmAppPolari(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createProfileIdNetworkSmProfileUmbrella(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkSmProfileUmbrella(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkSmAppPolaris(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkSmProfileUmbrella(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmProfileUmbrella(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmProfileUmbrella(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createProfileIdNetworkSmProfileClarity(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSmProfileClarity(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkSmProfileClarity(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSmProfileClarity(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SMController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkSmProfileClarity(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "SplashSettingsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSsidSplashSettings(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SplashSettingsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSsidSplashSettings(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "PIIController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPiiRequest(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PIIController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkPiiRequest(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PIIController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPiiSmDevicesForKey(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "PIIController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPiiSmOwnersForKey(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "PIIController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPiiRequests(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "PIIController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkPiiRequests(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PIIController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPiiPiiKeys(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "SwitchPortsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceSwitchPort(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SwitchPortsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateDeviceSwitchPort(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SwitchPortsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceSwitchPorts(serial, callback)"
        }
      },
      "params": ["serial", "callback"]
    }
  ],
  [
    {
      "group": "SplashLoginAttemptsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSplashLoginAttempts(id, callback)"
        }
      },
      "params": ["id", "callback"]
    }
  ],
  [
    {
      "group": "SSIDsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSsids(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "SSIDsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSsid(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SSIDsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSsid(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "HTTPServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkHttpServersWebhookTests(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "HTTPServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkHttpServersWebhookTest(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "HTTPServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkHttpServers(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "HTTPServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkHttpServer(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "HTTPServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkHttpServer(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "HTTPServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkHttpServer(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "HTTPServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkHttpServers(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "BluetoothClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkBluetoothClients(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "BluetoothClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkBluetoothClient(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkBluetoothSettings(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkTraffic(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkAccessPolicies(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkAirMarshal(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkBluetoothSettings(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createBindNetwork(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createUnbindNetwork(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSiteToSiteVpn(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSiteToSiteVpn(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createOrganizationNetworks(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetwork(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetwork(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetwork(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "NetworksController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationNetworks(organizationId, callback)"
        }
      },
      "params": ["organizationId", "callback"]
    }
  ],
  [
    {
      "group": "MerakiAuthUsersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkMerakiAuthUsers(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "MerakiAuthUsersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkMerakiAuthUser(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientSplashAuthorizationStatus(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkClientSplashAuthorizationStatus(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientLatencyHistory(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientPolicy(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkClientPolicy(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClient(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientUsageHistory(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientTrafficHistory(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientEvents(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "ClientsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceClients(serial, callback)"
        }
      },
      "params": ["serial", "callback"]
    }
  ],
  [
    {
      "group": "PhoneContactsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkPhoneContact(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneContactsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkPhoneContact(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneContactsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneContacts(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "PhoneContactsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkPhoneContacts(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "PhoneAnnouncementsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkPhoneAnnouncements(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneAnnouncementsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkPhoneAnnouncement(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneAnnouncementsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneAnnouncements(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "PhoneCallgroupsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkPhoneCallgroups(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneCallgroupsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneCallgroup(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneCallgroupsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkPhoneCallgroup(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneCallgroupsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkPhoneCallgroup(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneCallgroupsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneCallgroups(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "PhoneNumbersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneNumbers(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "PhoneNumbersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneNumbersAvailable(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "PhoneAssignmentsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkPhoneAssignment(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneAssignmentsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkPhoneAssignment(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneAssignmentsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneAssignments(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "PhoneAssignmentsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneAssignment(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "PhoneConferenceRoomsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkPhoneConferenceRoom(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneConferenceRoomsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneConferenceRooms(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "PhoneConferenceRoomsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createNetworkPhoneConferenceRooms(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneConferenceRoomsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkPhoneConferenceRoom(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "PhoneConferenceRoomsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteNetworkPhoneConferenceRoom(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "AnalyticsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceCameraAnalyticsZoneHistory(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "AnalyticsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceCameraAnalyticsLive(serial, callback)"
        }
      },
      "params": ["serial", "callback"]
    },
    {
      "group": "AnalyticsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceCameraAnalyticsOverview(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "AnalyticsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceCameraAnalyticsZones(serial, callback)"
        }
      },
      "params": ["serial", "callback"]
    },
    {
      "group": "AnalyticsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getDeviceCameraAnalyticsRecent(serial, callback)"
        }
      },
      "params": ["serial", "callback"]
    }
  ],
  [
    {
      "group": "SyslogServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSyslogServers(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SyslogServersController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSyslogServers(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "MRL3FirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkSsidL3FirewallRules(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "MRL3FirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkSsidL3FirewallRules(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "MXCellularFirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkCellularFirewallRules(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "MXCellularFirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkCellularFirewallRules(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "MXL3FirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkL3FirewallRules(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "MXL3FirewallController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkL3FirewallRules(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    }
  ],
  [
    {
      "group": "SAMLRolesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateOrganizationSamlRole(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SAMLRolesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteOrganizationSamlRole(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SAMLRolesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationSamlRoles(organizationId, callback)"
        }
      },
      "params": ["organizationId", "callback"]
    },
    {
      "group": "SAMLRolesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createOrganizationSamlRoles(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "SAMLRolesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationSamlRole(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDeviceLossAndLatencyHistory(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDevices(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDevice(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkDevice(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDeviceUplink(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createClaimNetworkDevices(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createRemoveNetworkDevice(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "DevicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkDeviceLldpCdp(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "CamerasController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkCameraVideoLink(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationLicenseState(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationInventory(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationDeviceStatuses(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationSnmp(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateOrganizationSnmp(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationThirdPartyVPNPeers(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateOrganizationThirdPartyVPNPeers(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createOrganizations(body, callback)"
        }
      },
      "params": ["body", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganization(id, callback)"
        }
      },
      "params": ["id", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateOrganization(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createCloneOrganization(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> createClaimOrganization(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "OrganizationsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizations(callback)"
        }
      },
      "params": ["callback"]
    }
  ],
  [
    {
      "group": "ConfigTemplatesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getOrganizationConfigTemplates(organizationId, callback)"
        }
      },
      "params": ["organizationId", "callback"]
    },
    {
      "group": "ConfigTemplatesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> deleteOrganizationConfigTemplate(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "ClientSecurityEventsController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkClientSecurityEvents(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "FirewalledServicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkFirewalledServices(networkId, callback)"
        }
      },
      "params": ["networkId", "callback"]
    },
    {
      "group": "FirewalledServicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkFirewalledService(input, callback)"
        }
      },
      "params": ["input", "callback"]
    },
    {
      "group": "FirewalledServicesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> updateNetworkFirewalledService(input, callback)"
        }
      },
      "params": ["input", "callback"]
    }
  ],
  [
    {
      "group": "GroupPoliciesController",
      "title": "__vue_devtool_undefined__",
      "action": {
        "_custom": {
          "type": "function",
          "display": "<span>ƒ</span> getNetworkGroupPolicies(id, callback)"
        }
      },
      "params": ["id", "callback"]
    }
  ]
]
